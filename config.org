* Global Setup
#+BEGIN_SRC emacs-lisp

  ;; INSTALL PACKAGES
  ;; --------------------------------------

  (require 'package)


  ;;; Code:
  (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			   ("marmalade" . "https://marmalade-repo.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))

  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))

  (defvar myPackages
    '(better-defaults
      doom-themes
      ein
      elpy
      flycheck
      material-theme
      py-autopep8
      flyspell
      projectile
      magit
      golden-ratio
      helm
      helm-projectile
      helm-ag
      org-ref
      org-bullets
      openwith
      telephone-line
      langtool
      use-package
      iedit
      guide-key
      darktooth-theme
      ace-window
      smooth-scrolling
      company-quickhelp
      company-jedi
      expand-region
      ace-jump-mode
      all-the-icons-dired
      challenger-deep-theme
      telephone-line
      pylint
      sublimity
      ))

  (mapc #'(lambda (package)
      (unless (package-installed-p package)
	(package-install package)))
	myPackages)

  (require 'golden-ratio)
  (golden-ratio-mode 1)
  (require 'doom-themes)
  (load-theme 'doom-dracula t) ;; load material theme

  (doom-themes-visual-bell-config)
  (tool-bar-mode -1) ;; turn off that annoying top bar
  (toggle-scroll-bar -1) ;; turn off scrolling too!
  (menu-bar-mode -1) ;; turn off that annoying menu
  (global-set-key (kbd "C-+") 'magit-status)
  (recentf-mode 1)
  (setq-default recent-save-file "~/.emacs.d/recentf")
  (require 'use-package)
  (require 'iedit)
  (global-set-key (kbd "C-c e") 'iedit-mode)
  (add-hook 'after-init-hook 'global-company-mode)
  (global-linum-mode t)
  (global-hl-line-mode +1) ;; why is this not default!
  (add-hook 'before-save-hook 'whitespace-cleanup) ;; trailing whitespace begone
  (show-paren-mode 1) ;; I like to see my parenthesis thank you vmuch
  ;; Setup keybind reminders
  (require 'guide-key)
  (setq guide-key/guide-key-sequence '("C-c" "C-x"))
  (guide-key-mode 1)

  ;; Smooth scrolling please and thank you!
  ;; (require 'smooth-scrolling)
  ;; (smooth-scrolling-mode 1)


  ;; load sublimify
  (require 'sublimity)
  (require 'sublimity-scroll)
  (sublimity-mode 1)

  ;; Icons
  (use-package all-the-icons
    :demand t
    :config
    (use-package all-the-icons-dired
      :demand t
      :config
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)))

  ;; Enable ace window
  (global-set-key (kbd "M-o") 'ace-window)
  ;; Setup for GR
  (add-to-list 'golden-ratio-extra-commands 'ace-window)
  (electric-pair-mode)
  (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC

** Turning off backups of temp files
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp
  ;; Set default font
  (set-face-attribute 'default nil
		      :family "Source Code Pro"
		      :height 130
		      :weight 'normal
		      :width 'normal)
#+END_SRC
* Company stuff
#+BEGIN_SRC emacs-lisp
  (setq-default company-minimum-prefix-length 2   ; minimum prefix character number for auto complete.
		company-idle-delay 0.3
		company-echo-delay 0
		company-show-numbers t
		company-tooltip-align-annotations t ; align annotations to the right tooltip border.
		company-tooltip-flip-when-above t
		company-tooltip-limit 10          ; tooltip candidates max limit.
		company-tooltip-minimum 6         ; minimum candidates limit.
		company-tooltip-minimum-width 0   ; The minimum width of the tooltip's inner area.
					  ; This doesn't include the margins and the scroll bar.
		company-tooltip-margin 2          ; width of margin columns to show around the tooltip
		company-tooltip-offset-display 'scrollbar ; 'lines - how to show tooltip unshown candidates number.
		company-show-numbers nil ; t: show quick access numbers for the first ten candidates.
		company-selection-wrap-around t ; loop over candidates
		;; company-async-wait 0.03
		;; company-async-timeout 2
		)

  ;;; help document preview & popup
  (require 'company-quickhelp)
  (setq company-quickhelp--delay 0.1)
  (company-quickhelp-mode 1)

  (setq-default company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
				    company-preview-if-just-one-frontend
				    company-echo-metadata-frontend
				    company-quickhelp-frontend
				    ))

  (setq-default company-backends '((company-capf company-keywords
						 company-yasnippet
						 company-tempo ; flexible template insertion
						 )
				   (company-gtags company-etags)
				   company-elisp ; Emacs Lisp
				   ;; company-semantic ; C/C++
				   (company-clang  company-cmake) ; C/C++
				   ;; company-eclim ; Java
				   company-jedi ; Python
				   company-nxml company-css ; HTML, CSS, XML
				   ;; company-xcode ; for Xcode projects
				   company-bbdb ; BBDB
				   (company-dabbrev-code company-dabbrev company-abbrev) ; abbrev
				   company-files ; files & directory
				   company-ispell ; Ispell
				   ;; company-oddmuse ; wiki
				   ))

#+END_SRC

* LaTeX Setup
#+BEGIN_SRC emacs-lisp
  (defun run-latex ()
      (interactive)
      (let ((process (TeX-active-process))) (if process (delete-process process)))
      (let ((TeX-save-query nil)) (TeX-save-document ""))
      (TeX-command-menu "LaTeX"))
  (add-hook 'LaTeX-mode-hook (lambda () (local-set-key (kbd "C-x C-s") #'run-latex)))
#+END_SRC
* Spelling Setup
#+BEGIN_SRC emacs-lisp
  ;; SPELLING CONFIGURATION
  ;; --------------------------------------
  ;; Spell check activate
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mode-map (kbd "C-.") nil)
       (define-key flyspell-mode-map (kbd "C-,") nil)
       (define-key flyspell-mode-map (kbd "C-<") 'flyspell-goto-next-error)
       (define-key flyspell-mode-map (kbd "C->") 'company-ispell)
       ))
  (setq ispell-dictionary "british")

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; GRAMMAR CONFIG
;; --------------------------------------
;; Langtool setup

(require 'langtool)
(setq langtool-language-tool-jar "~/.emacs.d/LanguageTool-4.0/languagetool-commandline.jar")

#+END_SRC

* Org Mode Setup
#+BEGIN_SRC emacs-lisp
  ;; ORG CONFIGURATION
  ;; --------------------------------------

  (setq org-latex-listings 'minted
	org-latex-packages-alist '(("" "minted"))
	org-latex-pdf-process (quote ("texi2dvi --pdf %f
  pdflatex --shell-escape %f
  texi2dvi --pdf %f --shell-escape
  latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f")))

  ;; Turn on languages for org mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (python . t)
     (plantuml .t)))

  (setq org-confirm-babel-evaluate nil)
  (require 'org-ref)
  (setq org-plantuml-jar-path
	(expand-file-name "~/.emacs.d/plantuml.jar"))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  ;; Turn on org-mode syntax highlighting for src blocks
  (setq org-src-fontify-natively t)

  ;; Open with external application
  (require 'openwith)
  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "xreader" (file))))

  ;; Set the agenda to be what I document in my website
  (setq org-agenda-files '("~/Dropbox/Website/"))

  ;; Add a timestamp to closed topics
  (setq org-log-done 'time)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Some of my own functions which help with misc tasks
  (defun org-insert-latex-headers ()
    (interactive)
    (progn
    (find-file (read-file-name "Enter Filename:"))
    (insert (format "#+TITLE: %s
#+AUTHOR: Nathan Hughes
#+OPTIONS: toc:nil H:4 ^:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \\usepackage[margin=0.8in]{geometry}
#+LaTeX_HEADER: \\usepackage{amssymb,amsmath}
#+LaTeX_HEADER: \\usepackage{fancyhdr}
#+LaTeX_HEADER: \\pagestyle{fancy}
#+LaTeX_HEADER: \\usepackage{lastpage}
#+LaTeX_HEADER: \\usepackage{float}
#+LaTeX_HEADER: \\restylefloat{figure}
#+LaTeX_HEADER: \\usepackage{hyperref}
#+LaTeX_HEADER: \\hypersetup{urlcolor=blue}
#+LaTex_HEADER: \\usepackage{titlesec}
#+LaTex_HEADER: \\setcounter{secnumdepth}{4}
#+LaTeX_HEADER: \\usepackage{minted}
#+LaTeX_HEADER: \\setminted{frame=single,framesep=10pt}
#+LaTeX_HEADER: \\chead{}
#+LaTeX_HEADER: \\rhead{\\today}
#+LaTeX_HEADER: \\cfoot{}
#+LaTeX_HEADER: \\rfoot{\\thepage\\ of \\pageref{LastPage}}
#+LaTeX_HEADER: \\usepackage[parfill]{parskip}
#+LaTeX_HEADER:\\usepackage{subfig}
#+LaTeX_HEADER: \\hypersetup{colorlinks=true,linkcolor=black, citecolor=black}
#+LATEX_HEADER_EXTRA:  \\usepackage{framed}
#+LATEX: \\maketitle
#+LATEX: \\clearpage
#+LATEX: \\tableofcontents
#+LATEX: \\clearpage" (read-string "Enter Document Title:")) )))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
  (add-hook 'org-mode-hook #'visual-line-mode)
    (add-to-list 'org-latex-classes
		 '("dissertation_report"
		   "\\documentclass[11pt]{report}"
		   ("\\chapter{%s}" . "\\chapter*{%s}")
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC
** Webpage Project Management

#+BEGIN_SRC emacs-lisp

;; Setup for webpage
(setq org-publish-project-alist
      `(("Dissertation"
	 :base-directory "~/Dropbox/Website/"
	 :recursive t
	 :auto-sitemap t
	 :sitemap-sort-files anti-chronologically
	 :with-toc nil
	 :html-head-extra "<link rel=\"stylesheet\" href=\"./mycss.css\"/>"
	 :publishing-directory "/ssh:nah26@central.aber.ac.uk:~/public_html"
	 :publishing-function org-html-publish-to-html
	 )
	("images"
	 :base-directory "~/Dropbox/Website/images"
	 :base-extension "png\\|gif"
	 :publishing-directory "/ssh:nah26@central.aber.ac.uk:~/public_html/images"
	 :publishing-function org-publish-attachment
     )
	("DissertationWebsite" :components("Dissertation images"))
   )
)
#+END_SRC

* Python Mode Setup
#+BEGIN_SRC emacs-lisp
  ;; PYTHON CONFIGURATION
    ;; --------------------------------------
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

  ;; Load up elpy
  (elpy-enable)
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-backend "jedi")
  (setq python-shell-interpreter "ipython3"
	python-shell-interpreter-args "-i --simple-prompt")

  ;; use flycheck not flymake with elpy
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    (setq flycheck-python-pylint-executable "pylint3")
    (setq flycheck-python-flake8-executable "flake8")
    )

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; Resets python buffer so you can easily refresh classes
(defun reset-py ()
  (interactive)
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (kill-buffer "*Python*")
  (elpy-shell-send-region-or-buffer-and-step))
(define-key elpy-mode-map (kbd "<C-c c-r>") 'reset-py)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun populate-org-buffer (buffer filename root)
    (goto-char (point-min))
    (let ((to-insert (concat "* " (replace-regexp-in-string root "" filename) "\n") ))
      (while (re-search-forward
	      (rx (group (or "def" "class"))
		  space
		  (group (+ (not (any "()"))))
		  (? "(" (* nonl) "):" (+ "\n") (+ space)
		     (= 3 "\"")
		     (group (+? anything))
		     (= 3 "\"")))
	      nil 'noerror)
	(setq to-insert
	      (concat
	       to-insert
	       (if (string= "class" (match-string 1))
		   "** "
		 "*** ")
	       (match-string 2)
	       "\n"
	       (and (match-string 3)
		    (concat (match-string 3) "\n")))))
      (with-current-buffer buffer
	(insert to-insert))))

  (defun org-documentation-from-dir (&optional dir)
    (interactive)
    (let* ((dir  (or dir (read-directory-name "Choose base directory: ")))
	   (files (directory-files-recursively dir "\py$"))
	   (doc-buf (get-buffer-create "org-docs")))
      (dolist (file files)
	(with-temp-buffer
	  (insert-file-contents file)
	  (populate-org-buffer doc-buf file dir)))
      (with-current-buffer doc-buf
	(org-mode))))
#+END_SRC

** Ace Jump Mode
#+BEGIN_SRC emacs-lisp
  (require 'ace-jump-mode)

  (define-key global-map (kbd "C-c s") 'ace-jump-mode)

  ;;
  ;; enable a more powerful jump back function from ace jump mode
  ;;
  (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
  (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))
  (define-key global-map (kbd "C-c b") 'ace-jump-mode-pop-mark)

#+END_SRC

* Powerline-line
#+BEGIN_SRC emacs-lisp
  (eyebrowse-mode t)
    (use-package powerline
      :ensure t
      :config

      (defun make-rect (color height width)
	"Create an XPM bitmap."
	(when window-system
	  (propertize
	   " " 'display
	   (let ((data nil)
		 (i 0))
	     (setq data (make-list height (make-list width 1)))
	     (pl/make-xpm "percent" color color (reverse data))))))


      (defun powerline-mode-icon ()
	(let ((icon (all-the-icons-icon-for-buffer)))
	  (unless (symbolp icon) ;; This implies it's the major mode
	    (format " %s"
		    (propertize icon
				'help-echo (format "Major-mode: `%s`" major-mode)
				'face `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))))

      (set-face-attribute 'powerline-active0 nil :background (face-attribute 'mode-line :background))
      (set-face-attribute 'powerline-active1 nil :background (face-attribute 'mode-line :background))
      (set-face-attribute 'powerline-active2 nil :background (face-attribute 'mode-line :background))

      (set-face-attribute 'powerline-inactive0 nil :background (face-attribute 'mode-line :background))
      (set-face-attribute 'powerline-inactive1 nil :background (face-attribute 'mode-line :background))
      (set-face-attribute 'powerline-inactive2 nil :background (face-attribute 'mode-line :background))


      (setq-default mode-line-format
		    '("%e"
		      (:eval
		       (let* ((active (powerline-selected-window-active))
			      (modified (buffer-modified-p))
			      (face1 (if active 'powerline-active1 'powerline-inactive1))
			      (face2 (if active 'powerline-active2 'powerline-inactive2))
			      (bar-color (cond ((and active modified) (face-foreground 'error))
					       (active (face-background 'cursor))
					       (t (face-background 'tooltip))))
			      (lhs (list
				    (make-rect bar-color 30 3)
				    (when modified
				      (concat
				       " "
				       (all-the-icons-faicon "floppy-o"
							     :face (when active 'error)
							     :v-adjust -0.01)))
				    " "
				    (powerline-buffer-id)
				    "| "
				    (powerline-vc)
				    ))
			      (center (list
				       " "
				       (powerline-mode-icon)
				       " "
				       (powerline-major-mode)
				       " "))
			      (rhs (list
				    (format "%s" (eyebrowse--get 'current-slot))
				    " | "
				    (powerline-raw "%l:%c" 'mode-line 'r)
				    " | "
				    (powerline-raw "%6p" 'mode-line 'r)
				    (powerline-hud 'highlight 'region 1)
				    " "
				    ))
			      )
			 (concat
			  (powerline-render lhs)
			  (powerline-fill-center face1 (/ (powerline-width center) 2.0))
			  (powerline-render center)
			  (powerline-fill face2 (powerline-width rhs))
			  (powerline-render rhs))))))
      )
#+END_SRC

* Helm Mode Setup

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-projectile)
  (helm-mode 1)
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  (setq projectile-globally-ignored-directories (append '(".git" ".*" ) projectile-globally-ignored-directories))
  (setq projectile-globally-ignored-files (append '("*.png" "*.jpeg" "*.jpg" "*.tif" "*.o" "*.pyc") projectile-globally-ignored-files))


  (helm-projectile-on)
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (global-set-key (kbd "C-f") 'helm-projectile)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x a") 'helm-for-files)
  (global-set-key (kbd "M-x") 'helm-M-x)

  (defun project-change ()
    (interactive)
    (helm-projectile-switch-project)
    (neotree-dir (projectile-project-root)))

  (global-set-key (kbd "C-x p") 'project-change)
#+END_SRC

* Misc Functions

** Create diary entries for Dissertation
#+BEGIN_SRC emacs-lisp
  ;; This is actually my first custom emacs funciton
  ;; Don't judge me on it!
  (defun diss-summary ()
    "This function can be used to create an org file with today as it's file name."
    (interactive)
    (find-file  (concat "~/Dropbox/Dissertation/Documents/Notes/" (format-time-string "%Y-%m-%d.org" ))))
#+END_SRC
