* Global Setup
#+BEGIN_SRC emacs-lisp
  (when (not package-archive-contents)
    (package-refresh-contents))
  (defvar myPackages
    '(better-defaults
      doom-themes
      doom-modeline
      ein
      anaconda-mode
      company-anaconda
      flycheck
      py-autopep8
      flyspell
      projectile
      magit
      golden-ratio
      nyan-mode
      helm
      helm-projectile
      helm-ag
      org-ref
      org-bullets
      openwith
      langtool
      use-package
      iedit
      guide-key
      ace-window
      smooth-scrolling
      company-quickhelp
      expand-region
      ace-jump-mode
      all-the-icons-dired
      pylint
      multiple-cursors
      rainbow-mode
      zone-rainbow
      auctex
      yasnippet-snippets
      helm-c-yasnippet
      undo-tree
      winum
      swiper-helm
      rainbow-delimiters
      highlight-indent-guides
      symbol-overlay
      company-box
      centered-window
      ess
      ess-smart-equals
      ess-R-data-view
      vlf
      color-theme-sanityinc-tomorrow
      pyvenv
      ;;helm-company
      ))

  (mapc #'(lambda (package)
            (unless (package-installed-p package)
              (package-install package)))
        myPackages)
#+END_SRC

* Pre-load
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/nord-emacs/")
  (add-to-list 'load-path "~/.emacs.d/ox-ipynb/")
  (add-to-list 'load-path "~/.spacemacs.d/scimax/ob-ipython-upstream/")
  (add-to-list 'load-path "~/.spacemacs.d/scimax/")
#+END_SRC

** Variables to be set prior to loading

#+BEGIN_SRC emacs-lisp

  (setq winum-keymap
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "C-`") 'winum-select-window-by-number)
        (define-key map (kbd "C-Â²") 'winum-select-window-by-number)
        (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
        (define-key map (kbd "M-1") 'winum-select-window-1)
        (define-key map (kbd "M-2") 'winum-select-window-2)
        (define-key map (kbd "M-3") 'winum-select-window-3)
        (define-key map (kbd "M-4") 'winum-select-window-4)
        (define-key map (kbd "M-5") 'winum-select-window-5)
        (define-key map (kbd "M-6") 'winum-select-window-6)
        (define-key map (kbd "M-7") 'winum-select-window-7)
        (define-key map (kbd "M-8") 'winum-select-window-8)
        map))

  (setq ob-ipython-html-to-image-program "/usr/local/bin/wkhtmltopdf")

#+END_SRC

* General init

#+BEGIN_SRC emacs-lisp
  (require 'golden-ratio)
  (require 'doom-themes)
  (require 'symbol-overlay)
  (require 'guide-key)
  (require 'pyvenv)
  (require 'vlf-setup)
  (require 'helm)
  (require 'helm-projectile)
  (require 'ess)
  (require 'ess-R-data-view)
  (require 'ess-smart-equals)
  (require 'ace-jump-mode)
  (require 'yasnippet)
  (require 'helm-c-yasnippet)
  (require 'multiple-cursors)
  (require 'winum)
  (require 'use-package)
  (require 'iedit)
  (require 'ob-ipython)
  (require 'scimax-ob)
  (require 'scimax-org-babel-ipython-upstream)
  (require 'openwith)
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  (openwith-mode t)
  (setq openwith-associations '(("\\.pdf\\'" "open" (file))))
  (helm-mode 1)
  (projectile-global-mode)
  (winum-mode)
  (setq guide-key/guide-key-sequence '("C-c" "C-x"))
  (guide-key-mode 1)
  (global-set-key (kbd "C-c e") 'iedit-mode)
  (add-hook 'after-init-hook 'global-company-mode)
  (doom-themes-visual-bell-config)
  (global-hl-line-mode +1) ;; why is this not default!
  (add-hook 'before-save-hook 'whitespace-cleanup) ;; trailing whitespace begone
  (show-paren-mode 1) ;; I like to see my parenthesis thank you vmuch
  (smooth-scrolling-mode)
  (use-package all-the-icons
  :demand t
    :config
    (use-package all-the-icons-dired
      :demand t
      :config
      (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)))

  ;; Enable ace window
  ;; (global-set-key (kbd "M-o") 'ace-window)
  (electric-pair-mode)
  (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
  ;; Heck truncation
  (set-default 'truncate-lines nil)
  ;; Stop that minibuffer expansion
  ;;(setq resize-mini-windows nil)
  (toggle-scroll-bar -1)
#+END_SRC
** Pretty symbols mode

#+BEGIN_SRC emacs-lisp

  (global-prettify-symbols-mode 1)
  (add-hook
   'python-mode-hook
   (lambda ()
     (mapc (lambda (pair) (push pair prettify-symbols-alist))
           '(;; Syntax
             ("def" .      #x1D41F)
             ("in" .       #x2208)
             ("not in" .   #x2209)
             ("return" .   #x27fc)
             ("yield" .    #x27fb)
             ("for" .      #x2200)
             ;; Base Types
             ("int" .      #x2124)
             ("float" .    #x211d)
             ("str" .      #x1d54a)
             ("True" .     #x1d54b)
             ("False" .    #x1d53d)
             ;; Mypy
             ("Dict" .     #x1d507)
             ("List" .     #x2112)
             ("Tuple" .    #x2a02)
             ("Set" .      #x2126)
             ("Iterable" . #x1d50a)
             ("Union" .    #x22c3)))))


#+END_SRC




** Doom modeline

#+BEGIN_SRC emacs-lisp

  (require 'doom-modeline)
  (doom-modeline-mode 1)

  ;; How tall the mode-line should be. It's only respected in GUI.
  ;; If the actual char height is larger, it respects the actual height.
  (setq doom-modeline-height 25)

  ;; How wide the mode-line bar should be. It's only respected in GUI.
  (setq doom-modeline-bar-width 3)

  (setq doom-modeline-buffer-file-name-style 'truncate-upto-project)

  ;; Whether display icons in mode-line or not.
  (setq doom-modeline-icon t)

  ;; Whether display the icon for major mode. It respects `doom-modeline-icon'.
  (setq doom-modeline-major-mode-icon t)

  ;; Whether display color icons for `major-mode'. It respects
  ;; `doom-modeline-icon' and `all-the-icons-color-icons'.
  (setq doom-modeline-major-mode-color-icon t)

  ;; Whether display icons for buffer states. It respects `doom-modeline-icon'.
  (setq doom-modeline-buffer-state-icon t)

  ;; Whether display buffer modification icon. It respects `doom-modeline-icon'
  ;; and `doom-modeline-buffer-state-icon'.
  (setq doom-modeline-buffer-modification-icon t)

  ;; Whether display minor modes in mode-line or not.
  (setq doom-modeline-minor-modes nil)

  ;; If non-nil, a word count will be added to the selection-info modeline segment.
  (setq doom-modeline-enable-word-count nil)

  ;; Whether display buffer encoding.
  (setq doom-modeline-buffer-encoding t)

  ;; Whether display indentation information.
  (setq doom-modeline-indent-info nil)

  ;; If non-nil, only display one number for checker information if applicable.
  (setq doom-modeline-checker-simple-format t)

  ;; The maximum displayed length of the branch name of version control.
  (setq doom-modeline-vcs-max-length 12)

  ;; Whether display perspective name or not. Non-nil to display in mode-line.
  (setq doom-modeline-persp-name t)

  ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
  (setq doom-modeline-lsp t)

  ;; Whether display github notifications or not. Requires `ghub` package.
  (setq doom-modeline-github nil)

  ;; The interval of checking github.
  (setq doom-modeline-github-interval (* 30 60))

  ;; Whether display environment version or not
  (setq doom-modeline-env-version t)

  (setq column-number-mode t)
#+END_SRC

** Transposes
#+BEGIN_SRC emacs-lisp
  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))
#+END_SRC

* Alternative defaults


#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1) ;; turn off that annoying top bar
  (setq make-backup-files nil) ; stop creating backup~ files
  (setq auto-save-default nil) ; stop creating #autosave# files
  (menu-bar-mode -1) ;; turn off that annoying menu
  (recentf-mode 1)
  (setq-default recent-save-file "~/.emacs.d/recentf")
  (fringe-mode 0)
#+END_SRC

* OSX Specific Stuff

#+BEGIN_SRC emacs-lisp

(setq mac-command-modifier 'control)
(setq-default mac-option-modifier 'meta)

  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

  ;; This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))


  (set-exec-path-from-shell-PATH)
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))

  (add-to-list 'default-frame-alist '(ns-appearance . dark))

#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp
    ;;set a default font
  (set-face-attribute 'default nil
                      :family "Source Code Pro"
                      :height 140
                      :weight 'normal
                      :width 'normal)
    ;; specify font for all unicode characters
    (when (member "Symbola" (font-family-list))
      (set-fontset-font t 'unicode "Symbola" nil 'prepend))
    ;; specify font for chinese characters using default chinese font on linux
    (when (member "WenQuanYi Micro Hei" (font-family-list))
      (set-fontset-font t '(#x4e00 . #x9fff) "WenQuanYi Micro Hei" ))
#+END_SRC
* Company stuff
#+BEGIN_SRC emacs-lisp
  (setq-default company-minimum-prefix-length 2   ; minimum prefix character number for auto complete.
                company-idle-delay 0.3
                company-echo-delay 0
                company-show-numbers t
                company-tooltip-align-annotations t ; align annotations to the right tooltip border.
                company-tooltip-flip-when-above t
                company-tooltip-limit 10          ; tooltip candidates max limit.
                company-tooltip-minimum 6         ; minimum candidates limit.
                company-tooltip-minimum-width 0   ; The minimum width of the tooltip's inner area.
                                          ; This doesn't include the margins and the scroll bar.
                company-tooltip-margin 2          ; width of margin columns to show around the tooltip
                company-tooltip-offset-display 'scrollbar ; 'lines - how to show tooltip unshown candidates number.
                company-show-numbers nil ; t: show quick access numbers for the first ten candidates.
                company-selection-wrap-around t ; loop over candidates
                ;; company-async-wait 0.03
                ;; company-async-timeout 2
                )

  ;;; help document preview & popup
  (require 'company-quickhelp)
  (setq company-quickhelp--delay 0.1)
  (company-quickhelp-mode 1)
  (setq company-ispell-dictionary (file-truename "~/.emacs.d/words.txt"))
  (setq-default company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                                    company-preview-if-just-one-frontend
                                    company-echo-metadata-frontend
                                    company-quickhelp-frontend
                                    ))


  (setq-default company-backends '(company-files
                                   company-capf
                                   company-keywords
                                   company-yasnippet
                                   company-gtags
                                   company-etags
                                   company-elisp
                                   company-nxml
                                   company-bbdb ; BBDB
                                   company-dabbrev-code
                                   company-dabbrev
                                   company-abbrev
                                   company-ispell
                                   ))

  (defun my-dot-p (input)
    (eq ?. (string-to-char input)))
  (setq company-auto-complete-chars #'my-dot-p)


#+END_SRC

* Window Arranging

#+BEGIN_SRC emacs-lisp

  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
           (next-win-buffer (window-buffer (next-window)))
           (this-win-edges (window-edges (selected-window)))
           (next-win-edges (window-edges (next-window)))
           (this-win-2nd (not (and (<= (car this-win-edges)
                       (car next-win-edges))
                       (<= (cadr this-win-edges)
                       (cadr next-win-edges)))))
           (splitter
            (if (= (car this-win-edges)
               (car (window-edges (next-window))))
            'split-window-horizontally
          'split-window-vertically)))
      (delete-other-windows)
      (let ((first-win (selected-window)))
        (funcall splitter)
        (if this-win-2nd (other-window 1))
        (set-window-buffer (selected-window) this-win-buffer)
        (set-window-buffer (next-window) next-win-buffer)
        (select-window first-win)
        (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x |") 'toggle-window-split)

#+END_SRC

* Helm Mode Setup

#+BEGIN_SRC emacs-lisp
  (helm-projectile-on)
  (setq projectile-enable-caching t)
  (setq projectile-globally-ignored-directories (append '(".git" ".*" ) projectile-globally-ignored-directories))
  (setq projectile-globally-ignored-files (append '("*.png" "*.jpeg" "*.jpg" "*.tif" "*.o" "*.pyc") projectile-globally-ignored-files))


  (define-key
  helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action

  (customize-set-variable 'helm-ff-lynx-style-map t)

  (add-to-list 'display-buffer-alist
                        `(,(rx bos "*helm" (* not-newline) "*" eos)
                         (display-buffer-in-side-window)
                         (inhibit-same-window . t)
                         (window-height . 0.4)))
#+END_SRC

* LaTeX Setup
#+BEGIN_SRC emacs-lisp
;;; AUCTeX
;; Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2
(setq TeX-parse-self t); Enable parse on load.
(setq TeX-auto-save t); Enable parse on save.
(setq-default TeX-master nil)

(setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

(add-hook 'TeX-mode-hook
          (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
(setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.

;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
(setq LaTeX-csquotes-close-quote "}"
      LaTeX-csquotes-open-quote "\\enquote{")

;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
(add-hook 'TeX-mode-hook 'LaTeX-math-mode)

;;; RefTeX
;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html
(add-hook 'TeX-mode-hook 'turn-on-reftex)

(eval-after-load 'reftex-vars; Is this construct really needed?
  '(progn
     (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite macros.
     ;; Make RefTeX interact with AUCTeX, http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html
     (setq reftex-plug-into-AUCTeX t)
     ;; So that RefTeX also recognizes \addbibresource. Note that you
     ;; can't use $HOME in path for \addbibresource but that "~"
     ;; works.
     (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
     (setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"); Recognize \subcaptions, e.g. reftex-citation
     (setq reftex-cite-format; Get ReTeX with biblatex, see https://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992
           '((?t . "\\textcite[]{%l}")
             (?a . "\\autocite[]{%l}")
             (?c . "\\cite[]{%l}")
             (?s . "\\smartcite[]{%l}")
             (?f . "\\footcite[]{%l}")
             (?n . "\\nocite{%l}")
             (?b . "\\blockcquote[]{%l}{}")))))

;; Fontification (remove unnecessary entries as you notice them) http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html
(setq font-latex-match-reference-keywords
      '(
        ;; biblatex
        ("printbibliography" "[{")
        ("addbibresource" "[{")
        ;; Standard commands
        ;; ("cite" "[{")
        ("Cite" "[{")
        ("parencite" "[{")
        ("Parencite" "[{")
        ("footcite" "[{")
        ("footcitetext" "[{")
        ;; ;; Style-specific commands
        ("textcite" "[{")
        ("Textcite" "[{")
        ("smartcite" "[{")
        ("Smartcite" "[{")
        ("cite*" "[{")
        ("parencite*" "[{")
        ("supercite" "[{")
        ; Qualified citation lists
        ("cites" "[{")
        ("Cites" "[{")
        ("parencites" "[{")
        ("Parencites" "[{")
        ("footcites" "[{")
        ("footcitetexts" "[{")
        ("smartcites" "[{")
        ("Smartcites" "[{")
        ("textcites" "[{")
        ("Textcites" "[{")
        ("supercites" "[{")
        ;; Style-independent commands
        ("autocite" "[{")
        ("Autocite" "[{")
        ("autocite*" "[{")
        ("Autocite*" "[{")
        ("autocites" "[{")
        ("Autocites" "[{")
        ;; Text commands
        ("citeauthor" "[{")
        ("Citeauthor" "[{")
        ("citetitle" "[{")
        ("citetitle*" "[{")
        ("citeyear" "[{")
        ("citedate" "[{")
        ("citeurl" "[{")
        ;; Special commands
        ("fullcite" "[{")))

(setq font-latex-match-textual-keywords
      '(
        ;; biblatex brackets
        ("parentext" "{")
        ("brackettext" "{")
        ("hybridblockquote" "[{")
        ;; Auxiliary Commands
        ("textelp" "{")
        ("textelp*" "{")
        ("textins" "{")
        ("textins*" "{")
        ;; supcaption
        ("subcaption" "[{")))

(setq font-latex-match-variable-keywords
      '(
        ;; amsmath
        ("numberwithin" "{")
        ;; enumitem
        ("setlist" "[{")
        ("setlist*" "[{")
        ("newlist" "{")
        ("renewlist" "{")
        ("setlistdepth" "{")
        ("restartlist" "{")))


;; Use pdf-tools to open PDF files
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
           #'TeX-revert-document-buffer)

(with-eval-after-load 'tex
  (add-to-list 'safe-local-variable-values
               '(TeX-command-extra-options . "-shell-escape")))

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun run-latex ()
      (interactive)
      (let ((process (TeX-active-process))) (if process (delete-process process)))
      (let ((TeX-save-query nil)) (TeX-save-document ""))
      (TeX-command-menu "LaTeX")
      (TeX-command-menu "bibtex")
      (TeX-command-menu "LaTeX")
      (TeX-command-menu "LaTeX"))
  (add-hook 'LaTeX-mode-hook (lambda () (local-set-key (kbd "C-c C-a") #'run-latex)))
#+END_SRC

** Display latex fragments properly

#+BEGIN_SRC emacs-lisp
(defun display-latex-fragments-in-buffer ()
  "This will properly display all fragments in org-mode >9"
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-preview-latex-fragment))
  )
#+END_SRC



** Add some better default args to compiling
#+BEGIN_SRC emacs-lisp
  (eval-after-load "tex"
    '(progn
       (add-to-list
        'TeX-engine-alist
        '(default-shell-escape "Default with shell escape"
       "pdftex -shell-escape"
       "pdflatex -shell-escape"
       ConTeXt-engine))
       ;; (setq-default TeX-engine 'default-shell-escape)
       ))
#+END_SRC

* Spelling Setup
#+BEGIN_SRC emacs-lisp
  ;; SPELLING CONFIGURATION
  ;; --------------------------------------
  ;; Spell check activate

  (setq ispell-program-name "/usr/local/bin/aspell")
  (add-hook 'text-mode-hook 'flyspell-mode)
  (setq highlight-indent-guides-method 'character)
  (defun my-prog-mode-hook ()
    "Adds a few things to my prog hook"
    (flyspell-prog-mode)
    (rainbow-delimiters-mode)
    (highlight-indent-guides-mode)
    (symbol-overlay-mode)
    (display-line-numbers-mode)
    )

  (add-hook 'prog-mode-hook 'my-prog-mode-hook)

  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mode-map (kbd "C-.") nil)
       (define-key flyspell-mode-map (kbd "C-,") nil)
       ))
  (setq ispell-dictionary "en_GB")

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; GRAMMAR CONFIG
;; --------------------------------------
;; Langtool setup

(setq langtool-language-tool-jar "~/.emacs.d/langtool/languagetool-commandline.jar")
(require 'langtool)


#+END_SRC

* Org Mode Setup


** General Setup
 #+BEGIN_SRC emacs-lisp
         ;; ORG CONFIGURATION
         ;; --------------------------------------

      (setq org-image-actual-width nil)
      (define-key org-mode-map (kbd "C-c p") 'display-latex-fragments-in-buffer)
      (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))

       (setq org-todo-keywords
             '((sequence "TODO" "|" "DONE")
               (sequence "IDEA" "|" "DONE")
               (sequence  "BUG" "|" "FIXED")
               (sequence  "QUESTION" "|" "ANSWERED")
               (sequence "|" "CANCELLED")))

         (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

         ;; Need to sort out some ob-ipython stuff here
         (add-to-list 'load-path "~/.emacs.d/scimax/")
         (require 'ob-ipython)
         (require 'scimax-ob)
         (require 'scimax-org-babel-ipython-upstream)
         (add-to-list 'company-backends 'company-ob-ipython)



         (setq org-agenda-files (list "~/Google Drive/org/work.org"
                                      "~/Google Drive/org/university.org"
                                      "~/Google Drive/org/home.org"))

         (defun org-latex-export-to-pdf-and-clean ()
           (interactive)
           (org-latex-export-to-pdf)
           (delete-file (concat (file-name-sans-extension (buffer-name)) ".tex"))
           (delete-file (concat (file-name-sans-extension (buffer-name)) ".bbl"))
           (delete-file (concat (file-name-sans-extension (buffer-name)) ".synctex.gz"))
           (delete-file "texput.log")
           (delete-directory "auto" 't)
           (delete-directory (concat "_minted-" (file-name-sans-extension (buffer-name))) 't)
           )
         (global-set-key  [f5] (lambda () (interactive) (org-latex-export-to-pdf-and-clean)))

       (setq org-latex-listings 'minted
             org-latex-packages-alist '(("" "minted"))
             org-latex-pdf-process (quote ("latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f --synctex=1")))


         (setq org-latex-minted-options
               '(("frame" "lines") ("linenos=true") ("fontfamily=Monaco")))

         ;;(add-to-list 'org-latex-minted-langs '(ipython "python"))

         ;; Turn on languages for org mode
         (org-babel-do-load-languages
          'org-babel-load-languages
          '((R . t)
            (python . t)
            (ipython . t)
            (plantuml .t)
            (latex . t)))
         (setq org-babel-python-command "python")
         (setq org-confirm-babel-evaluate nil)
         (require 'org-ref)
         (setq org-latex-prefer-user-labels t)
         (define-key org-mode-map (kbd "C-c i") 'org-ref-helm-insert-ref-link)
         (setq reftex-default-bibliography '("~/PHD/Notes/library.bib"))
         (setq org-ref-default-bibliography '("~/PHD/Notes/library.bib"))


         (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
         (setq org-plantuml-jar-path
               (expand-file-name "~/.emacs.d/plantuml.jar"))
         (setq plantuml-jar-path
               (expand-file-name "~/.emacs.d/plantuml.jar"))

         (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
         ;; Turn on org-mode syntax highlighting for src blocks
         (setq org-src-fontify-natively t)

         (defun org-babel-run-and-display-images ()
           (interactive)
           (progn
             (org-babel-execute-src-block-maybe)
             (org-display-inline-images)))

         (define-key org-mode-map (kbd "<f6>") 'org-babel-run-and-display-images)

         ;; Add a timestamp to closed topics
         (setq org-log-done 'time)
         (define-key org-mode-map (kbd "C-<tab>") nil)
 #+END_SRC


#+BEGIN_SRC emacs-lisp
  (setq org-fontify-whole-heading-line t)

    (custom-set-faces
    '(org-level-1 ((t (:inherit outline-1 :height 2.0))))
    '(org-level-2 ((t (:inherit outline-2 :height 1.5))))
    '(org-level-3 ((t (:inherit outline-3 :height 1.2))))
    '(org-level-4 ((t (:inherit outline-4 :height 1.1))))
    '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
    )
#+END_SRC


** Setup for docx export


#+BEGIN_SRC emacs-lisp
    ;; (defun helm-bibtex-format-pandoc-citation (keys)
    ;;   (concat "[" (mapconcat (lambda (key) (concat "@" key)) keys "; ") "]"))

    ;; inform helm-bibtex how to format the citation in org-mode
    ;; (setf (cdr (assoc 'org-mode helm-bibtex-format-citation-functions))
    ;;	'helm-bibtex-format-pandoc-citation)

  (defun ox-export-to-docx-and-open ()
   (interactive)
   (org-latex-export-to-latex)
   (let* ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
          (current-file (buffer-file-name))
          (basename (file-name-sans-extension current-file))
          (tex-file (concat basename  ".tex"))
          (docxfile (concat basename ".docx"))
          )
     (save-buffer)
     (when (file-exists-p docxfile) (delete-file docxfile))
     (shell-command (format
                     "pandoc %s --bibliography=%s  -o %s"
                     tex-file bibfile docxfile))
     (org-open-file docxfile '(16))))
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
  (add-hook 'org-mode-hook #'visual-line-mode)
    (add-to-list 'org-latex-classes
                 '("dissertation_report"
                   "\\documentclass[11pt, twoside]{report}"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC

* R mode

#+BEGIN_SRC emacs-lisp



  (defun ess-R-show-objects ()
    "Calls rdired and associates with R process"
    (interactive)
    (if (get-buffer "*R*") ;;Only run if R is running
        (progn
          (ess-rdired)
          (ess-rdired-switch-process))
      (message "No R process")
      )
    )

  (setq ess-eval-visibly 'nowait)

#+END_SRC

* Python Mode Setup
#+BEGIN_SRC emacs-lisp
    ;; PYTHON CONFIGURATION
      ;; --------------------------------------
  (setenv "WORKON_HOME" "~/anaconda3/envs")
  (pyvenv-workon "playground") ;; Default working env that has my libs



  (setq python-shell-interpreter "ipython"
        python-shell-interpreter-args "--simple-prompt -i")

  ;; enable autopep8 formatting on save
  (require 'py-autopep8)
  (setq python-indent-offset 4)
  (defun python-custom-settings ()
    (setq tab-width 4))
  (setq-default indent-tabs-mode nil)

  (defun my-python-mode-setup ()
    (py-autopep8-enable-on-save)
    (python-custom-settings)
    (flycheck-mode)
    (anaconda-mode)
    (setq flycheck-python-pylint-executable "pylint3")
    (setq flycheck-python-flake8-executable "flake8")
    )

  (add-hook 'python-mode-hook 'my-python-mode-setup)

  (eval-after-load "company"
  '(add-to-list 'company-backends '(company-anaconda)))
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode)
  ;;   (highlight-indentation-mode))
#+END_SRC

* Ace Jump Mode
#+BEGIN_SRC emacs-lisp
  (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
  (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))
#+END_SRC

* Misc Functions

** Create various diary entries for phd

#+BEGIN_SRC emacs-lisp
   ;; Creates a new file for a diary entry into phd progress!
   (defun sharp/new-phd-diary ()
     "This function can be used to create an org file with today as it's file name."
     (interactive)
     (find-file  (concat "~/PHD/Notes/" (format-time-string "phd-diaries/%Y/%m/%W.org" )))
     (insert
      (format
       "#+TITLE: %s
  ,#+AUTHOR: Nathan Hughes
  ,#+INCLUDE: \"./preamble.org\" :minlevel 1

  ,* Tasks

   bibliography:../../../library.bib
   bibliographystyle:plainnat
   " "PhD Diary" ) ) )


   (defun sharp/find-phd-diary ()
   (interactive)
     (find-file  (concat "~/PHD/Notes/" (format-time-string "phd-diaries/%Y/%m/%W.org" ))))


   (defun friday-talks ()
     "This function can be used to create an org file with today as it's file name."
     (interactive)
     (find-file  (concat "~/PHD/Notes/" (format-time-string "friday-seminar-%Y-%W.org" ))))

#+END_SRC


** Auto save report to tex

#+BEGIN_SRC emacs-lisp
  (defun sharp/save-report ()
    "Exports a tex version of the report document"
    (interactive)
    (setq sharp/last-buffer (current-buffer))
    (find-file "~/PHD/Probation/report.org")
    (org-latex-export-to-latex)
    (switch-to-buffer sharp/last-buffer)
    (shell-command "texcount report.tex | grep 'Words'"))

  (defun sharp/run-compile ()
    "runs a nice commands to constantly build on change my report"
    (interactive)
    (async-shell-command "cd ~/PHD/Probation/; latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f report.tex --synctex=1 -pvc -view=none")
    )

  (defun sharp/save-presentation ()
    "Exports a tex version of the report document"
    (interactive)
    (org-beamer-export-to-latex)
  )

  (defun sharp/run-compile ()
    "runs a nice commands to constantly build on change my report"
    (interactive)
    (async-shell-command "cd ~/PHD/Probation/; latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f report.tex --synctex=1 -pvc -view=none")
    )

  (defun sharp/run-compile-presentation ()
    "runs a nice commands to constantly build on change my report"
    (interactive)
    (async-shell-command "cd ~/PHD/Documents/Presentations/project_update_beamer/September; latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f presentation.tex --synctex=1 -pvc -view=none")
    )
#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
(setq helm-yas-space-match-any-greedy t)
(global-set-key (kbd "C-c y") 'helm-yas-complete)
(yas-global-mode 1)
(yas-load-directory "~/.emacs.d/snippets/")

(defun company-yasnippet-or-completion ()
  "Solve company yasnippet conflicts."
  (interactive)
  (let ((yas-fallback-behavior
         (apply 'company-complete-common nil)))
    (yas-expand)))

(add-hook 'company-mode-hook
          (lambda ()
            (substitute-key-definition
             'company-complete-common
             'company-yasnippet-or-completion
             company-active-map)))

#+END_SRC

* Winum

#+BEGIN_SRC emacs-lisp
  (define-advice select-window (:after (window &optional no-record) golden-ratio-resize-window) (golden-ratio) nil)
#+END_SRC
* Custom keybinds

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f8>") 'golden-ratio)    ; F7 F8
  (global-set-key (kbd "C-+") 'magit-status)
  (global-set-key (kbd "C-l") 'ace-jump-line-mode)
  (global-set-key [M-up] 'move-line-up)
  (global-set-key [M-down] 'move-line-down)
  (global-set-key (kbd "C-f") 'helm-projectile)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x a") 'helm-for-files)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-i") 'helm-imenu)
  (global-set-key (kbd "C-s") 'swiper-helm)
  (define-key global-map (kbd "C-c b") 'ace-jump-mode-pop-mark)
  (global-set-key [C-tab] 'ace-jump-word-mode)
  (global-set-key (kbd "C-.") 'mc/mark-next-like-this)
  (global-set-key (kbd "C->") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-c m l") 'mc/edit-lines)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  ;;(define-key mc/keymap (kbd "<return>") nil)
#+END_SRC




* Themes
#+BEGIN_SRC emacs-lisp
  ;;(require 'nord-theme)
  ;;(load-theme nord t)
  (load-theme 'sanityinc-tomorrow-eighties t)

#+END_SRC
