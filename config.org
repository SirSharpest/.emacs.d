* Global Setup
  
#+BEGIN_SRC emacs-lisp

;; INSTALL PACKAGES
;; --------------------------------------

(require 'package)


;;; Code:
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "https://marmalade-repo.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")))

(package-initialize)
(when (not package-archive-contents)
  (package-refresh-contents))

(defvar myPackages
  '(better-defaults
    doom-themes
    ein
    elpy
    flycheck
    material-theme
    py-autopep8
    flyspell
    projectile
    magit
    golden-ratio
    projectile
    helm
    helm-projectile
    org-ref
    org-bullets
    openwith
    auto-complete
    jedi
    powerline
    langtool
    use-package
    iedit
    ))

(mapc #'(lambda (package)
    (unless (package-installed-p package)
      (package-install package)))
      myPackages)

(require 'powerline)
(powerline-default-theme)
(require 'golden-ratio)
(golden-ratio-mode 1)
(setq golden-ratio-auto-scale t)
(require 'doom-themes)
(load-theme 'doom-one t) ;; load material theme
(doom-themes-org-config)
(doom-themes-visual-bell-config)
(tool-bar-mode -1) ;; turn off that annoying top bar
(toggle-scroll-bar -1) ;; turn off scrolling too! 
(menu-bar-mode -1) ;; turn off that annoying menu
(global-set-key (kbd "C-=") 'magit-status)
(recentf-mode 1)
(setq-default recent-save-file "~/.emacs.d/recentf")
(require 'use-package)
(require 'iedit)
(global-set-key (kbd "C-c e") 'iedit-mode)
#+END_SRC

* Misc Functions
  
** Create diary entries for Dissertation
#+BEGIN_SRC emacs-lisp
;; This is actually my first custom emacs funciton 
;; Don't judge me on it!
(defun diss-summary ()
  "This function can be used to create an org file with today as it's file name."
  (interactive)
  (find-file  (concat "~/Dropbox/Dissertation/Documents/Notes/" (format-time-string "%Y-%m-%d.org" ))))
#+END_SRC

* Spelling Setup

#+BEGIN_SRC emacs-lisp
;; SPELLING CONFIGURATION
;; --------------------------------------
;; Spell check activate
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(eval-after-load "flyspell"
  '(progn
     (define-key flyspell-mode-map (kbd "C-.") nil)
     (define-key flyspell-mode-map (kbd "C-,") nil)
     (define-key flyspell-mode-map (kbd "C-<") 'flyspell-goto-next-error)
     (define-key flyspell-mode-map (kbd "C->") 'company-ispell)
     ))
(setq ispell-dictionary "british")

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; GRAMMAR CONFIG
;; --------------------------------------
;; Langtool setup 

(require 'langtool)
(setq langtool-language-tool-jar "~/.emacs.d/LanguageTool-4.0/languagetool-commandline.jar")

#+END_SRC

* Org Mode Setup

#+BEGIN_SRC emacs-lisp
;; ORG CONFIGURATION
;; --------------------------------------

(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process (quote ("texi2dvi --pdf %f
pdflatex --shell-escape %f 
texi2dvi --pdf %f --shell-escape
latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f")))

;; Turn on languages for org mode
(org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
   (python . t)
   (plantuml .t)))

(setq org-confirm-babel-evaluate nil)
(require 'org-ref)
(setq org-plantuml-jar-path
      (expand-file-name "~/.emacs.d/plantuml.jar"))

(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

;; Turn on org-mode syntax highlighting for src blocks
(setq org-src-fontify-natively t)

;; Open with external application 
(require 'openwith)
(openwith-mode t)
(setq openwith-associations '(("\\.pdf\\'" "evince" (file))))

;; Set the agenda to be what I document in my website
(setq org-agenda-files '("~/Dropbox/Website/"))

;; Add a timestamp to closed topics
(setq org-log-done 'time)

#+END_SRC

** Webpage Project Management

#+BEGIN_SRC emacs-lisp

;; Setup for webpage
(setq org-publish-project-alist
      `(("Dissertation"
         :base-directory "~/Dropbox/Website/"
         :recursive t
	 :auto-sitemap t
	 :sitemap-sort-files anti-chronologically	
	 :with-toc nil
	 :html-head-extra "<link rel=\"stylesheet\" href=\"./mycss.css\"/>"
         :publishing-directory "/ssh:nah26@central.aber.ac.uk:~/public_html"
         :publishing-function org-html-publish-to-html
	 )
	("images"
	 :base-directory "~/Dropbox/Website/images"
	 :base-extension "png\\|gif"
	 :publishing-directory "/ssh:nah26@central.aber.ac.uk:~/public_html/images"
	 :publishing-function org-publish-attachment
     )
	("DissertationWebsite" :components("Dissertation images"))
   )
) 
#+END_SRC

* Python Mode Setup

#+BEGIN_SRC emacs-lisp
;; PYTHON CONFIGURATION
;; --------------------------------------

(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))

;; enable autopep8 formatting on save
(require 'py-autopep8)
(setq py-autopep8-options '("--max-line-length=100"))

(use-package jedi
  :ensure t
  :init
  (add-hook 'python-mode-hook 'jedi:setup)
  (add-hook 'python-mode-hook 'jedi:ac-setup)
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save))

(setq jedi:complete-on-dot t)
(setq python-shell-interpreter "ipython"
      python-shell-interpreter-args "-i --simple-prompt")
(define-key jedi-mode-map (kbd "<C-tab>") 'jedi:complete)



#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Resets python buffer so you can easily refresh classes

(defun reset-py ()
  (interactive)
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (kill-buffer "*Python*")
  (elpy-shell-send-region-or-buffer-and-step))

(define-key jedi-mode-map (kbd "<C-c c-r>") 'rest-py)
#+END_SRC

* Helm Mode Setup

#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-projectile)
(helm-mode 1)
(helm-projectile-on)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(global-set-key (kbd "C-f") 'helm-projectile)
(global-set-key (kbd "C-x b") 'helm-buffers-list)
(global-set-key (kbd "C-b") 'helm-buffers-list)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x A") 'helm-for-files)
(global-set-key (kbd "M-x") 'helm-M-x)


#+END_SRC
