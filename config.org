* Global Setup
#+BEGIN_SRC emacs-lisp

    ;; INSTALL PACKAGES
    ;; --------------------------------------
    (setq warning-minimum-level :emergency) ;; to fix annoying start up
    (require 'package)


    ;;; Code:
    (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                             ("marmalade" . "https://marmalade-repo.org/packages/")
                             ("melpa" . "https://melpa.org/packages/")))
    (package-initialize)
    (when (not package-archive-contents)
      (package-refresh-contents))
    (defvar myPackages
      '(better-defaults
        doom-themes
        ein
        elpy
        anaconda-mode
        company-anaconda
        flycheck
        py-autopep8
        flyspell
        projectile
        magit
        golden-ratio
        nyan-mode
        helm
        helm-projectile
        helm-ag
        org-ref
        org-bullets
        openwith
        telephone-line
        langtool
        use-package
        iedit
        guide-key
        ace-window
        smooth-scrolling
        company-quickhelp
        expand-region
        ace-jump-mode
        all-the-icons-dired
        telephone-line
        pylint
        eyebrowse
        multiple-cursors
        rainbow-mode
        zone-rainbow
        auctex
        yasnippet-snippets
        helm-c-yasnippet
        ob-ipython
        undo-tree
        winum
        treemacs
        ))

    (mapc #'(lambda (package)
        (unless (package-installed-p package)
          (package-install package)))
          myPackages)

    (require 'golden-ratio)
    (require 'doom-themes)
    (global-set-key (kbd "<XF86AudioPlay>") 'zone-rainbow) ;; for headphone
    (global-set-key (kbd "<f8>") 'linum-mode)    ; F7 F8
    (global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))
    (load-theme 'doom-nord t)
    (doom-themes-visual-bell-config)
    (tool-bar-mode -1) ;; turn off that annoying top bar
    (toggle-scroll-bar -1) ;; turn off scrolling too!
    (menu-bar-mode -1) ;; turn off that annoying menu
    (global-set-key (kbd "C-+") 'magit-status)
    (global-set-key (kbd "C-l") 'ace-jump-line-mode)
    (recentf-mode 1)
    (setq-default recent-save-file "~/.emacs.d/recentf")
    (require 'use-package)
    (require 'iedit)
    (global-set-key (kbd "C-c e") 'iedit-mode)
    (add-hook 'after-init-hook 'global-company-mode)
    (global-hl-line-mode +1) ;; why is this not default!
    (add-hook 'before-save-hook 'whitespace-cleanup) ;; trailing whitespace begone
    (show-paren-mode 1) ;; I like to see my parenthesis thank you vmuch
    ;; Setup keybind reminders
    (require 'guide-key)
    (setq guide-key/guide-key-sequence '("C-c" "C-x"))
    (guide-key-mode 1)

    ;; Smooth scrolling please and thank you!
    (require 'smooth-scrolling)
    (smooth-scrolling-mode 1)

    ;; Fix some frame issues
    (set-face-background 'vertical-border "gray")
    (set-face-foreground 'vertical-border (face-background 'vertical-border))
    (require 'ob-ipython)
  ;; Icons
    (use-package all-the-icons
      :demand t
      :config
      (use-package all-the-icons-dired
        :demand t
        :config
        (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)))

    ;; Enable ace window
    ;; (global-set-key (kbd "M-o") 'ace-window)
    (electric-pair-mode)
    (require 'expand-region)
    (global-set-key (kbd "C-=") 'er/expand-region)

    ;; Heck truncation
    (set-default 'truncate-lines nil)
#+END_SRC

** Transposes
#+BEGIN_SRC emacs-lisp

  (defun move-line-up ()
    "Move up the current line."
    (interactive)
    (transpose-lines 1)
    (forward-line -2)
    (indent-according-to-mode))

  (defun move-line-down ()
    "Move down the current line."
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1)
    (indent-according-to-mode))

  (global-set-key [M-up] 'move-line-up)
  (global-set-key [M-down] 'move-line-down)
#+END_SRC

** Turning off backups of temp files

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil) ; stop creating backup~ files
(setq auto-save-default nil) ; stop creating #autosave# files
#+END_SRC

* OSX Specific Stuff

#+BEGIN_SRC emacs-lisp

  (setq mac-command-modifier 'control)

  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

  ;; This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))


  (set-exec-path-from-shell-PATH)
#+END_SRC

* Here be daemons
#+BEGIN_SRC emacs-lisp
  ;; (defun load-nord-theme (frame)
  ;;   (select-frame frame)
  ;;   (toggle-scroll-bar -1) ;; tag along
  ;;   (load-theme 'doom-nord t))

  ;; (if (daemonp)
  ;;         (add-hook 'after-make-frame-functions #'load-nord-theme)
  ;;   (load-theme 'doom-nord t))
#+END_SRC

* Fonts
#+BEGIN_SRC emacs-lisp
  ;;set a default font
  (when (member "Monaco" (font-family-list))
    (set-face-attribute 'default nil :font "Monaco"))

  ;; specify font for all unicode characters
  (when (member "Symbola" (font-family-list))
    (set-fontset-font t 'unicode "Symbola" nil 'prepend))

  ;; specify font for chinese characters using default chinese font on linux
  (when (member "WenQuanYi Micro Hei" (font-family-list))
    (set-fontset-font t '(#x4e00 . #x9fff) "WenQuanYi Micro Hei" ))

  (set-face-attribute 'default nil :height 160)
#+END_SRC

* Company stuff
#+BEGIN_SRC emacs-lisp
  (setq-default company-minimum-prefix-length 2   ; minimum prefix character number for auto complete.
                company-idle-delay 0.3
                company-echo-delay 0
                company-show-numbers t
                company-tooltip-align-annotations t ; align annotations to the right tooltip border.
                company-tooltip-flip-when-above t
                company-tooltip-limit 10          ; tooltip candidates max limit.
                company-tooltip-minimum 6         ; minimum candidates limit.
                company-tooltip-minimum-width 0   ; The minimum width of the tooltip's inner area.
                                          ; This doesn't include the margins and the scroll bar.
                company-tooltip-margin 2          ; width of margin columns to show around the tooltip
                company-tooltip-offset-display 'scrollbar ; 'lines - how to show tooltip unshown candidates number.
                company-show-numbers nil ; t: show quick access numbers for the first ten candidates.
                company-selection-wrap-around t ; loop over candidates
                ;; company-async-wait 0.03
                ;; company-async-timeout 2
                )

  ;;; help document preview & popup
  (require 'company-quickhelp)
  (setq company-quickhelp--delay 0.1)
  (company-quickhelp-mode 1)

  (setq-default company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                                    company-preview-if-just-one-frontend
                                    company-echo-metadata-frontend
                                    company-quickhelp-frontend
                                    ))

  ;; (setq-default company-backends '((company-files
  ;;				  company-jedi ; Python
  ;;				  company-capf
  ;;				  company-keywords
  ;;				  company-yasnippet
  ;;				  company-tempo
  ;;				  company-gtags
  ;;				  company-etags
  ;;				  company-elisp
  ;;				  company-nxml
  ;;				  company-css ; HTML, CSS, XML
  ;;				  company-bbdb ; BBDB
  ;;				  company-dabbrev-code
  ;;				  company-dabbrev
  ;;				  company-abbrev
  ;;				  company-ispell ; Ispell
  ;;				 )))


  (defun my-dot-p (input)
    (eq ?. (string-to-char input)))
  (setq company-auto-complete-chars #'my-dot-p)

#+END_SRC

* Window Arranging

#+BEGIN_SRC emacs-lisp

  (defun toggle-window-split ()
    (interactive)
    (if (= (count-windows) 2)
        (let* ((this-win-buffer (window-buffer))
           (next-win-buffer (window-buffer (next-window)))
           (this-win-edges (window-edges (selected-window)))
           (next-win-edges (window-edges (next-window)))
           (this-win-2nd (not (and (<= (car this-win-edges)
                       (car next-win-edges))
                       (<= (cadr this-win-edges)
                       (cadr next-win-edges)))))
           (splitter
            (if (= (car this-win-edges)
               (car (window-edges (next-window))))
            'split-window-horizontally
          'split-window-vertically)))
      (delete-other-windows)
      (let ((first-win (selected-window)))
        (funcall splitter)
        (if this-win-2nd (other-window 1))
        (set-window-buffer (selected-window) this-win-buffer)
        (set-window-buffer (next-window) next-win-buffer)
        (select-window first-win)
        (if this-win-2nd (other-window 1))))))

  (global-set-key (kbd "C-x |") 'toggle-window-split)

#+END_SRC

* PDF tools
#+BEGIN_SRC emacs-lisp
  ;; wrapper for save-buffer ignoring arguments
  (defun bjm/save-buffer-no-args ()
    "Save buffer ignoring arguments"
    (save-buffer))
  (use-package pdf-tools
   :pin manual ;;manually update
   :config
   ;; initialise
   (pdf-tools-install)
   (setq-default pdf-view-display-size 'fit-page)
   ;; automatically annotate highlights
   (setq pdf-annot-activate-created-annotations t)
   ;; use isearch instead of swiper
   (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
   ;; turn off cua so copy works
   (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
   ;; more fine-grained zooming
   (setq pdf-view-resize-factor 1.1)
   ;; keyboard shortcuts
   (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
   (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
   (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete)
   ;; wait until map is available
   (with-eval-after-load "pdf-annot"
     (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<return>") 'pdf-annot-edit-contents-commit)
     (define-key pdf-annot-edit-contents-minor-mode-map (kbd "<S-return>") 'newline)
     ;; save after adding comment
     (advice-add 'pdf-annot-edit-contents-commit :after 'bjm/save-buffer-no-args)))

#+END_SRC

* LaTeX Setup
#+BEGIN_SRC emacs-lisp


;;; AUCTeX
;; Customary Customization, p. 1 and 16 in the manual, and http://www.emacswiki.org/emacs/AUCTeX#toc2
(setq TeX-parse-self t); Enable parse on load.
(setq TeX-auto-save t); Enable parse on save.
(setq-default TeX-master nil)

(setq TeX-PDF-mode t); PDF mode (rather than DVI-mode)

(add-hook 'TeX-mode-hook
          (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
(setq LaTeX-babel-hyphen nil); Disable language-specific hyphen insertion.

;; " expands into csquotes macros (for this to work babel must be loaded after csquotes).
(setq LaTeX-csquotes-close-quote "}"
      LaTeX-csquotes-open-quote "\\enquote{")

;; LaTeX-math-mode http://www.gnu.org/s/auctex/manual/auctex/Mathematics.html
(add-hook 'TeX-mode-hook 'LaTeX-math-mode)

;;; RefTeX
;; Turn on RefTeX for AUCTeX http://www.gnu.org/s/auctex/manual/reftex/reftex_5.html
(add-hook 'TeX-mode-hook 'turn-on-reftex)

(eval-after-load 'reftex-vars; Is this construct really needed?
  '(progn
     (setq reftex-cite-prompt-optional-args t); Prompt for empty optional arguments in cite macros.
     ;; Make RefTeX interact with AUCTeX, http://www.gnu.org/s/auctex/manual/reftex/AUCTeX_002dRefTeX-Interface.html
     (setq reftex-plug-into-AUCTeX t)
     ;; So that RefTeX also recognizes \addbibresource. Note that you
     ;; can't use $HOME in path for \addbibresource but that "~"
     ;; works.
     (setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
;     (setq reftex-default-bibliography '("UNCOMMENT LINE AND INSERT PATH TO YOUR BIBLIOGRAPHY HERE")); So that RefTeX in Org-mode knows bibliography
     (setcdr (assoc 'caption reftex-default-context-regexps) "\\\\\\(rot\\|sub\\)?caption\\*?[[{]"); Recognize \subcaptions, e.g. reftex-citation
     (setq reftex-cite-format; Get ReTeX with biblatex, see https://tex.stackexchange.com/questions/31966/setting-up-reftex-with-biblatex-citation-commands/31992#31992
           '((?t . "\\textcite[]{%l}")
             (?a . "\\autocite[]{%l}")
             (?c . "\\cite[]{%l}")
             (?s . "\\smartcite[]{%l}")
             (?f . "\\footcite[]{%l}")
             (?n . "\\nocite{%l}")
             (?b . "\\blockcquote[]{%l}{}")))))

;; Fontification (remove unnecessary entries as you notice them) http://lists.gnu.org/archive/html/emacs-orgmode/2009-05/msg00236.html http://www.gnu.org/software/auctex/manual/auctex/Fontification-of-macros.html
(setq font-latex-match-reference-keywords
      '(
        ;; biblatex
        ("printbibliography" "[{")
        ("addbibresource" "[{")
        ;; Standard commands
        ;; ("cite" "[{")
        ("Cite" "[{")
        ("parencite" "[{")
        ("Parencite" "[{")
        ("footcite" "[{")
        ("footcitetext" "[{")
        ;; ;; Style-specific commands
        ("textcite" "[{")
        ("Textcite" "[{")
        ("smartcite" "[{")
        ("Smartcite" "[{")
        ("cite*" "[{")
        ("parencite*" "[{")
        ("supercite" "[{")
        ; Qualified citation lists
        ("cites" "[{")
        ("Cites" "[{")
        ("parencites" "[{")
        ("Parencites" "[{")
        ("footcites" "[{")
        ("footcitetexts" "[{")
        ("smartcites" "[{")
        ("Smartcites" "[{")
        ("textcites" "[{")
        ("Textcites" "[{")
        ("supercites" "[{")
        ;; Style-independent commands
        ("autocite" "[{")
        ("Autocite" "[{")
        ("autocite*" "[{")
        ("Autocite*" "[{")
        ("autocites" "[{")
        ("Autocites" "[{")
        ;; Text commands
        ("citeauthor" "[{")
        ("Citeauthor" "[{")
        ("citetitle" "[{")
        ("citetitle*" "[{")
        ("citeyear" "[{")
        ("citedate" "[{")
        ("citeurl" "[{")
        ;; Special commands
        ("fullcite" "[{")))

(setq font-latex-match-textual-keywords
      '(
        ;; biblatex brackets
        ("parentext" "{")
        ("brackettext" "{")
        ("hybridblockquote" "[{")
        ;; Auxiliary Commands
        ("textelp" "{")
        ("textelp*" "{")
        ("textins" "{")
        ("textins*" "{")
        ;; supcaption
        ("subcaption" "[{")))

(setq font-latex-match-variable-keywords
      '(
        ;; amsmath
        ("numberwithin" "{")
        ;; enumitem
        ("setlist" "[{")
        ("setlist*" "[{")
        ("newlist" "{")
        ("renewlist" "{")
        ("setlistdepth" "{")
        ("restartlist" "{")))


;; Use pdf-tools to open PDF files
(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
(add-hook 'TeX-after-compilation-finished-functions
           #'TeX-revert-document-buffer)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (defun run-latex ()
      (interactive)
      (let ((process (TeX-active-process))) (if process (delete-process process)))
      (let ((TeX-save-query nil)) (TeX-save-document ""))
      (TeX-command-menu "LaTeX"))
  (add-hook 'LaTeX-mode-hook (lambda () (local-set-key (kbd "C-x C-s") #'run-latex)))
#+END_SRC
* Spelling Setup
#+BEGIN_SRC emacs-lisp
  ;; SPELLING CONFIGURATION
  ;; --------------------------------------
  ;; Spell check activate

  (setq ispell-program-name "/usr/local/bin/aspell")

  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'prog-mode-hook 'rainbow-mode)
  (eval-after-load "flyspell"
    '(progn
       (define-key flyspell-mode-map (kbd "C-.") nil)
       (define-key flyspell-mode-map (kbd "C-,") nil)
       ))
  (setq ispell-dictionary "en_GB")

#+END_SRC

#+BEGIN_SRC emacs-lisp
;; GRAMMAR CONFIG
;; --------------------------------------
;; Langtool setup

(require 'langtool)
(setq langtool-language-tool-jar "~/.emacs.d/LanguageTool-4.0/languagetool-commandline.jar")

#+END_SRC

* Org Mode Setup

** General Setup
#+BEGIN_SRC emacs-lisp
  ;; ORG CONFIGURATION
  ;; --------------------------------------



  (setq org-todo-keywords '((type "TODO" "IDEA" "|" "DONE")))

  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  ;;(add-to-list 'load-path "~/.emacs.d/ob-ipython/")
  ;;(require 'ob-ipython)

  (setq org-agenda-files (list "~/Google Drive/org/work.org"
                               "~/Google Drive/org/university.org"
                               "~/Google Drive/org/home.org"))

  (defun org-latex-export-to-pdf-and-clean ()
    (interactive)
    (org-latex-export-to-pdf)
    (delete-file (concat (file-name-sans-extension (buffer-name)) ".tex"))
    (delete-file (concat (file-name-sans-extension (buffer-name)) ".bbl"))
    (delete-file (concat (file-name-sans-extension (buffer-name)) ".synctex.gz"))
    (delete-file "texput.log")
    (delete-directory "auto" 't)
    (delete-directory (concat "_minted-" (file-name-sans-extension (buffer-name))) 't)
    )

  (global-set-key  [f5] (lambda () (interactive) (org-latex-export-to-pdf-and-clean)))

(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process (quote ("texi2dvi --pdf %f
pdflatex --shell-escape %f
texi2dvi --pdf %f --shell-escape
latexmk -pdflatex='lualatex -shell-escape -interaction nonstopmode' -pdf -f  %f --synctex=1")))



  (setq org-latex-minted-options
        '(("frame" "lines") ("linenos=true") ("fontfamily=Monaco")))

  ;;(add-to-list 'org-latex-minted-langs '(ipython "python"))

  ;; Turn on languages for org mode
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (python . t)
     (ipython . t)
     (plantuml .t)))
  (setq org-babel-python-command "python3")
  (setq org-confirm-babel-evaluate nil)
  (require 'org-ref)

  (setq reftex-default-bibliography '("~/PHD/Notes/library.bib"))
  (setq org-ref-default-bibliography '("~/PHD/Notes/library.bib"))


  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
  (setq org-plantuml-jar-path
        (expand-file-name "~/.emacs.d/plantuml.jar"))
  (setq plantuml-jar-path
        (expand-file-name "~/.emacs.d/plantuml.jar"))

  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  ;; Turn on org-mode syntax highlighting for src blocks
  (setq org-src-fontify-natively t)

  ;; Open with external application
  (require 'openwith)
                                          ;(openwith-mode t)
                                          ;(setq openwith-associations '(("\\.pdf\\'" "xreader" (file))))


  (defun org-babel-run-and-display-images ()
    (interactive)
    (progn
      (org-babel-execute-src-block-maybe)
      (org-display-inline-images)))

  (define-key org-mode-map (kbd "<f6>") 'org-babel-run-and-display-images)

  ;; Add a timestamp to closed topics
  (setq org-log-done 'time)
  (define-key org-mode-map (kbd "C-<tab>") nil)
#+END_SRC

** Setup for docx export


#+BEGIN_SRC emacs-lisp
    ;; (defun helm-bibtex-format-pandoc-citation (keys)
    ;;   (concat "[" (mapconcat (lambda (key) (concat "@" key)) keys "; ") "]"))

    ;; inform helm-bibtex how to format the citation in org-mode
    ;; (setf (cdr (assoc 'org-mode helm-bibtex-format-citation-functions))
    ;;	'helm-bibtex-format-pandoc-citation)

  (defun ox-export-to-docx-and-open ()
   (interactive)
   (org-latex-export-to-latex)
   (let* ((bibfile (expand-file-name (car (org-ref-find-bibliography))))
          (current-file (buffer-file-name))
          (basename (file-name-sans-extension current-file))
          (tex-file (concat basename  ".tex"))
          (docxfile (concat basename ".docx"))
          )
     (save-buffer)
     (when (file-exists-p docxfile) (delete-file docxfile))
     (shell-command (format
                     "pandoc %s --bibliography=%s  -o %s"
                     tex-file bibfile docxfile))
     (org-open-file docxfile '(16))))
#+END_SRC

** Basic Headers for org-latex
#+BEGIN_SRC emacs-lisp
  ;; Some of my own functions which help with misc tasks
  (defun org-insert-latex-headers ()
    (interactive)
    (progn
    (find-file (read-file-name "Enter Filename:"))
    (insert (format "#+TITLE: %s
#+AUTHOR: Nathan Hughes
#+OPTIONS: toc:nil H:4 ^:nil
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \\usepackage[margin=0.8in]{geometry}
#+LaTeX_HEADER: \\usepackage{amssymb,amsmath}
#+LaTeX_HEADER: \\usepackage{fancyhdr}
#+LaTeX_HEADER: \\pagestyle{fancy}
#+LaTeX_HEADER: \\usepackage{lastpage}
#+LaTeX_HEADER: \\usepackage{float}
#+LaTeX_HEADER: \\restylefloat{figure}
#+LaTeX_HEADER: \\usepackage{hyperref}
#+LaTeX_HEADER: \\hypersetup{urlcolor=blue}
#+LaTex_HEADER: \\usepackage{titlesec}
#+LaTex_HEADER: \\setcounter{secnumdepth}{4}
#+LaTeX_HEADER: \\usepackage{minted}
#+LaTeX_HEADER: \\setminted{frame=single,framesep=10pt}
#+LaTeX_HEADER: \\chead{}
#+LaTeX_HEADER: \\rhead{\\today}
#+LaTeX_HEADER: \\cfoot{}
#+LaTeX_HEADER: \\rfoot{\\thepage\\ of \\pageref{LastPage}}
#+LaTeX_HEADER: \\usepackage[parfill]{parskip}
#+LaTeX_HEADER:\\usepackage{subfig}
#+LaTeX_HEADER: \\hypersetup{colorlinks=true,linkcolor=black, citecolor=black}
#+LATEX_HEADER_EXTRA:  \\usepackage{framed}
#+LATEX: \\maketitle
#+LATEX: \\clearpage
#+LATEX: \\tableofcontents
#+LATEX: \\clearpage" (read-string "Enter Document Title:")) )))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
  (add-hook 'org-mode-hook #'visual-line-mode)
    (add-to-list 'org-latex-classes
                 '("dissertation_report"
                   "\\documentclass[11pt]{report}"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC
** Webpage Project Management

#+BEGIN_SRC emacs-lisp

;; Setup for webpage
(setq org-publish-project-alist
      `(("Dissertation"
         :base-directory "~/Dropbox/Website/"
         :recursive t
         :auto-sitemap t
         :sitemap-sort-files anti-chronologically
         :with-toc nil
         :html-head-extra "<link rel=\"stylesheet\" href=\"./mycss.css\"/>"
         :publishing-directory "/ssh:nah26@central.aber.ac.uk:~/public_html"
         :publishing-function org-html-publish-to-html
         )
        ("images"
         :base-directory "~/Dropbox/Website/images"
         :base-extension "png\\|gif"
         :publishing-directory "/ssh:nah26@central.aber.ac.uk:~/public_html/images"
         :publishing-function org-publish-attachment
     )
        ("DissertationWebsite" :components("Dissertation images"))
   )
)
#+END_SRC

* Python Mode Setup
#+BEGIN_SRC emacs-lisp
    ;; PYTHON CONFIGURATION
      ;; --------------------------------------
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))

  (elpy-enable)
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-backend "rope")
  (setenv "WORKON_HOME" "/Users/hughesn/anaconda3/envs")
  (setq python-shell-interpreter "ipython3"
        python-shell-interpreter-args " --pdb --nosep --classic -i --simple-prompt"
        python-shell-prompt-regexp ">>> "
        python-shell-prompt-output-regexp ""
        python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
        python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
        python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"
        )


  ;; enable autopep8 formatting on save
  (require 'py-autopep8)


  (setq python-indent-offset 4)
  (defun python-custom-settings ()
    (setq tab-width 4))
  (setq-default indent-tabs-mode nil)

  (defun my-python-mode-setup ()
    (py-autopep8-enable-on-save)
    (python-custom-settings)
    (flycheck-mode)
    (setq flycheck-python-pylint-executable "pylint3")
    (setq flycheck-python-flake8-executable "flake8")
    (setq-local company-backends
                (append '((company-jedi)) company-backends)))

  (add-hook 'python-mode-hook 'my-python-mode-setup)




#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; Resets python buffer so you can easily refresh classes
(defun reset-py ()
  (interactive)
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
  (kill-buffer "*Python*")
  (elpy-shell-send-region-or-buffer-and-step))


#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun populate-org-buffer (buffer filename root)
    (goto-char (point-min))
    (let ((to-insert (concat "* " (replace-regexp-in-string root "" filename) "\n") ))
      (while (re-search-forward
              (rx (group (or "def" "class"))
                  space
                  (group (+ (not (any "()"))))
                  (? "(" (* nonl) "):" (+ "\n") (+ space)
                     (= 3 "\"")
                     (group (+? anything))
                     (= 3 "\"")))
              nil 'noerror)
        (setq to-insert
              (concat
               to-insert
               (if (string= "class" (match-string 1))
                   "** "
                 "*** ")
               (match-string 2)
               "\n"
               (and (match-string 3)
                    (concat (match-string 3) "\n")))))
      (with-current-buffer buffer
        (insert to-insert))))

  (defun org-documentation-from-dir (&optional dir)
    (interactive)
    (let* ((dir  (or dir (read-directory-name "Choose base directory: ")))
           (files (directory-files-recursively dir "\py$"))
           (doc-buf (get-buffer-create "org-docs")))
      (dolist (file files)
        (with-temp-buffer
          (insert-file-contents file)
          (populate-org-buffer doc-buf file dir)))
      (with-current-buffer doc-buf
        (org-mode))))
#+END_SRC

* Ace Jump Mode
#+BEGIN_SRC emacs-lisp
  (require 'ace-jump-mode)

(global-set-key [C-tab] 'ace-jump-word-mode)

;;
  ;; enable a more powerful jump back function from ace jump mode
  ;;
  (autoload
    'ace-jump-mode-pop-mark
    "ace-jump-mode"
    "Ace jump back:-)"
    t)
  (eval-after-load "ace-jump-mode"
    '(ace-jump-mode-enable-mark-sync))
  (define-key global-map (kbd "C-c b") 'ace-jump-mode-pop-mark)

#+END_SRC

* Powerline Mode
#+BEGIN_SRC emacs-lisp
  (eyebrowse-mode t)
  (nyan-mode)

  (use-package powerline
      :ensure t
      :config

      (defun make-rect (color height width)
        "Create an XPM bitmap."
        (when window-system
          (propertize
           "  " 'display
           (let ((data nil)
                 (i 0))
             (setq data (make-list height (make-list width 1)))
             (pl/make-xpm "percent" color color (reverse data))))))

      ;; fix solid color bar

      (set-face-attribute 'powerline-active0 nil :background (face-attribute 'mode-line :background))
      (set-face-attribute 'powerline-active1 nil :background (face-attribute 'mode-line :background))
      (set-face-attribute 'powerline-active2 nil :background (face-attribute 'mode-line :background))

      (set-face-attribute 'powerline-inactive0 nil :background (face-attribute 'mode-line-inactive :background))
      (set-face-attribute 'powerline-inactive1 nil :background (face-attribute 'mode-line-inactive :background))
      (set-face-attribute 'powerline-inactive2 nil :background (face-attribute 'mode-line-inactive :background))


      (defun powerline-mode-icon ()
      (let ((icon (all-the-icons-icon-for-buffer)))
          (unless (symbolp icon) ;; This implies it's the major mode
            (format " %s"
                    (propertize icon
                                'help-echo (format "Major-mode: `%s`" major-mode)
                                'face `(:height 1.2 :family ,(all-the-icons-icon-family-for-buffer)))))))


      (setq-default mode-line-format
                    '("%e"
                      (:eval
                       (let* ((active (powerline-selected-window-active))
                              (modified (buffer-modified-p))
                              (face1 (if active 'powerline-active1 'powerline-inactive1))
                              (face2 (if active 'powerline-active2 'powerline-inactive2))
                              (bar-color (cond ((and active modified) (face-foreground 'error))
                                               (active (face-background 'cursor))
                                               (t (face-background 'tooltip))))
                              (lhs (list
                                    (make-rect bar-color 30 3)
                                    (when modified
                                      (concat
                                       " "
                                       (all-the-icons-faicon "floppy-o"
                                                             :face (when active 'error)
                                                             :v-adjust -0.01)))
                                    " "
                                    (powerline-buffer-id)
                                    "| "
                                    (powerline-vc)
                                    ))
                              (center (list
                                       " "
                                       (powerline-mode-icon)
                                       " "
                                       (powerline-major-mode)
                                       " "))
                              (rhs (list
                                    ;;(format-mode-line "L: %l C: %c |")
                                    (format-mode-line "L: %l C: %c |")
                                    (nyan-create)
                                    ;;(powerline-hud 'highlight 'region 1)
                                    "|"

                                    ))
                              )
                         (concat
                          (powerline-render lhs)
                          (powerline-fill-center face1 (/ (powerline-width center) 2.0))
                          (powerline-render center)
                          (powerline-fill face2 (powerline-width rhs))
                          (powerline-render rhs))))))
      )

  (set-face-attribute 'mode-line nil
                          :box '(:width 0))
#+END_SRC

* Fix Nordic switch
#+BEGIN_SRC elisp

  (defun fixtheme-nord ()
    (disable-theme 'leuven-theme)
    (enable-theme 'doom-nord))

#+END_SRC

* Helm Mode Setup

#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-projectile)
  (helm-mode 1)
  (projectile-global-mode)
  (setq projectile-enable-caching t)
  (setq projectile-globally-ignored-directories (append '(".git" ".*" ) projectile-globally-ignored-directories))
  (setq projectile-globally-ignored-files (append '("*.png" "*.jpeg" "*.jpg" "*.tif" "*.o" "*.pyc") projectile-globally-ignored-files))


  (helm-projectile-on)
  (define-key
  helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (global-set-key (kbd "C-f") 'helm-projectile)
  (global-set-key (kbd "C-x b") 'helm-buffers-list)
  (global-set-key (kbd "C-b") 'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (global-set-key (kbd "C-x a") 'helm-for-files)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-i") 'helm-imenu)
  ;; (defun project-change ()
  ;;   (interactive)
  ;;   (helm-projectile-switch-project)
  ;;   (treemacs-projec (projectile-project-root)))

  ;; (global-set-key (kbd "C-x p") 'project-change)
#+END_SRC

* Misc Functions

** Create various diary entries for phd

#+BEGIN_SRC emacs-lisp
  ;; Creates a new file for a diary entry into phd progress!
  (defun phd-diary ()
    "This function can be used to create an org file with today as it's file name."
    (interactive)
    (find-file  (concat "~/PHD/Notes/" (format-time-string "phd-diary-%Y-%B-%W.org" )))
    (insert
     (format
      "#+TITLE: %s
  ,#+AUTHOR: Nathan Hughes
  ,#+OPTIONS: toc:nil H:4 ^:nil
  ,#+LaTeX_CLASS: article
  ,#+LaTeX_CLASS_OPTIONS: [a4paper]
  ,#+LaTeX_HEADER: \\usepackage[margin=0.8in]{geometry}
  ,#+LaTeX_HEADER: \\usepackage{amssymb,amsmath}
  ,#+LaTeX_HEADER: \\usepackage{fancyhdr}
  ,#+LaTeX_HEADER: \\pagestyle{fancy}
  ,#+LaTeX_HEADER: \\usepackage{lastpage}
  ,#+LaTeX_HEADER: \\usepackage{float}
  ,#+LaTeX_HEADER: \\restylefloat{figure}
  ,#+LaTeX_HEADER: \\usepackage{hyperref}
  ,#+LaTeX_HEADER: \\hypersetup{urlcolor=blue}
  ,#+LaTex_HEADER: \\usepackage{titlesec}
  ,#+LaTex_HEADER: \\setcounter{secnumdepth}{4}
  ,#+LaTeX_HEADER: \\usepackage{minted}
  ,#+LaTeX_HEADER: \\setminted{frame=single,framesep=10pt}
  ,#+LaTeX_HEADER: \\chead{}
  ,#+LaTeX_HEADER: \\rhead{\\today}
  ,#+LaTeX_HEADER: \\cfoot{}
  ,#+LaTeX_HEADER: \\rfoot{\\thepage\\ of \\pageref{LastPage}}
  ,#+LaTeX_HEADER: \\usepackage[parfill]{parskip}
  ,#+LaTeX_HEADER:\\usepackage{subfig}
  ,#+LaTeX_HEADER: \\hypersetup{colorlinks=true,linkcolor=black, citecolor=black}
  ,#+LATEX_HEADER_EXTRA:  \\usepackage{framed}
  ,#+LATEX: \\maketitle
  ,#+LATEX: \\clearpage
  ,#+LATEX: \\tableofcontents
  ,#+LATEX: \\clearpage

  bibliography:library.bib
  bibliographystyle:unsrt
  " "PhD Diary" ) ) )


  (defun find-phd-diary ()
  (interactive)
    (find-file  (concat "~/PHD/Notes/" (format-time-string "phd-diary-%Y-%B-%W.org" ))))


  (defun friday-talks ()
    "This function can be used to create an org file with today as it's file name."
    (interactive)
    (find-file  (concat "~/PHD/Notes/" (format-time-string "friday-seminar-%Y-%B-%W.org" ))))

#+END_SRC

* Yasnippet

#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(require 'helm-c-yasnippet)
(setq helm-yas-space-match-any-greedy t)
(global-set-key (kbd "C-c y") 'helm-yas-complete)
(yas-global-mode 1)
(yas-load-directory "~/.emacs.d/snippets/")
#+END_SRC

** omg make tabs great again (deprecated)

#+BEGIN_SRC emacs-lisp
  ;; (defun check-expansion ()
  ;;   (save-excursion
  ;;     (if (looking-at "\\_>") t
  ;;       (backward-char 1)
  ;;       (if (looking-at "\\.") t
  ;;     (backward-char 1)
  ;;     (if (looking-at "->") t nil)))))

  ;; (defun do-yas-expand ()
  ;;   (let ((yas/fallback-behavior 'return-nil))
  ;;     (yas/expand)))

  ;; (defun tab-indent-or-complete ()
  ;;   (interactive)
  ;;   (cond
  ;;    ((minibufferp)
  ;;     (minibuffer-complete))
  ;;    (t
  ;;     (indent-for-tab-command)
  ;;     (if (or (not yas/minor-mode)
  ;;         (null (do-yas-expand)))
  ;;     (if (check-expansion)
  ;;         (progn
  ;;           (company-manual-begin)
  ;;           (if (null company-candidates)
  ;;           (progn
  ;;             (company-abort)
  ;;             (indent-for-tab-command)))))))))

  ;; (defun tab-complete-or-next-field ()
  ;;   (interactive)
  ;;   (if (or (not yas/minor-mode)
  ;;       (null (do-yas-expand)))
  ;;       (if company-candidates
  ;;       (company-complete-selection)
  ;;     (if (check-expansion)
  ;;       (progn
  ;;         (company-manual-begin)
  ;;         (if (null company-candidates)
  ;;         (progn
  ;;           (company-abort)
  ;;           (yas-next-field))))
  ;;       (yas-next-field)))))

  ;; (defun expand-snippet-or-complete-selection ()
  ;;   (interactive)
  ;;   (if (or (not yas/minor-mode)
  ;;       (null (do-yas-expand))
  ;;       (company-abort))
  ;;       (company-complete-selection)))

  ;; (defun abort-company-or-yas ()
  ;;   (interactive)
  ;;   (if (null company-candidates)
  ;;       (yas-abort-snippet)
  ;;     (company-abort)))

  ;; (global-set-key [tab] 'tab-indent-or-complete)
  ;; (global-set-key (kbd "TAB") 'tab-indent-or-complete)
  ;; (global-set-key [(control return)] 'company-complete-common)

  ;; (define-key company-active-map [tab] 'expand-snippet-or-complete-selection)
  ;; (define-key company-active-map (kbd "TAB") 'expand-snippet-or-complete-selection)

  ;; (define-key yas-minor-mode-map [tab] nil)
  ;; (define-key yas-minor-mode-map (kbd "TAB") nil)

  ;; (define-key yas-keymap [tab] 'tab-complete-or-next-field)
  ;; (define-key yas-keymap (kbd "TAB") 'tab-complete-or-next-field)
  ;; (define-key yas-keymap [(control tab)] 'yas-next-field)
  ;; (define-key yas-keymap (kbd "C-g") 'abort-company-or-yas)

#+END_SRC
* Custom Keybinds
** Multiple Cursors
As this will require a lot of overrides I want it towards the end of the file
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
  (global-set-key (kbd "C-.") 'mc/mark-next-like-this)
  (global-set-key (kbd "C->") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-c m l") 'mc/edit-lines)
  (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
  (define-key mc/keymap (kbd "<return>") nil)
#+END_SRC
* Eww

#+BEGIN_SRC emacs-lisp

  (defvar-local endless/display-images t)


  (defun endless/toggle-image-display ()
    "Toggle images display on current buffer."
    (interactive)
    (setq endless/display-images
          (null endless/display-images))
    (endless/backup-display-property endless/display-images))


  (defun endless/backup-display-property (invert &optional object)
    "Move the 'display property at POS to 'display-backup.
  Only applies if display property is an image.
  If INVERT is non-nil, move from 'display-backup to 'display
  instead.
  Optional OBJECT specifies the string or buffer. Nil means current
  buffer."
    (let* ((inhibit-read-only t)
           (from (if invert 'display-backup 'display))
           (to (if invert 'display 'display-backup))
           (pos (point-min))
           left prop)
      (while (and pos (/= pos (point-max)))
        (if (get-text-property pos from object)
            (setq left pos)
          (setq left (next-single-property-change pos from object)))
        (if (or (null left) (= left (point-max)))
            (setq pos nil)
          (setq prop (get-text-property left from object))
          (setq pos (or (next-single-property-change left from object)
                        (point-max)))
          (when (eq (car prop) 'image)
            (add-text-properties left pos (list from nil to prop) object))))))

#+END_SRC

* Winum

#+BEGIN_SRC emacs-lisp
  (setq winum-keymap
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "C-`") 'winum-select-window-by-number)
        (define-key map (kbd "C-²") 'winum-select-window-by-number)
        (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
        (define-key map (kbd "M-1") 'winum-select-window-1)
        (define-key map (kbd "M-2") 'winum-select-window-2)
        (define-key map (kbd "M-3") 'winum-select-window-3)
        (define-key map (kbd "M-4") 'winum-select-window-4)
        (define-key map (kbd "M-5") 'winum-select-window-5)
        (define-key map (kbd "M-6") 'winum-select-window-6)
        (define-key map (kbd "M-7") 'winum-select-window-7)
        (define-key map (kbd "M-8") 'winum-select-window-8)
        map))

  (require 'winum)
  (winum-mode)

  (define-advice select-window (:after (window &optional no-record) golden-ratio-resize-window)
  (golden-ratio) nil)
#+END_SRC

* Treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
            treemacs-deferred-git-apply-delay   0.5
            treemacs-display-in-side-window     t
            treemacs-file-event-delay           5000
            treemacs-file-follow-delay          0.2
            treemacs-follow-after-init          t
            treemacs-follow-recenter-distance   0.1
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-indentation                2
            treemacs-indentation-string         " "
            treemacs-is-never-other-window      nil
            treemacs-no-png-images              nil
            treemacs-project-follow-cleanup     nil
            treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-after-file-follow nil
            treemacs-recenter-after-tag-follow  nil
            treemacs-show-hidden-files          t
            treemacs-silent-filewatch           nil
            treemacs-silent-refresh             nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-space-between-root-nodes   t
            treemacs-tag-follow-cleanup         t
            treemacs-tag-follow-delay           1.5
            treemacs-width                      35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'extended))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))


  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)
#+END_SRC

* TODO Modes that would be useful
1. A method of using helm to jump between pdfview mode and org mode
2. A mode to grab latest matplotlib figure and display properly
3. A quickhelp option to look u p dictonary words for auto complete?
