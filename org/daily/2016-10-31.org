#+TITLE: Things that need doing this Month:
#+AUTHOR: Nathan Hughes
#+DATE: <2016-10-31 Mon>
#+OPTIONS: toc:nil

* Gravimetrics:
** Major problems: 
*** DONE Huge power dips are occurring
    Currently from one 5V power supply we have running (without problems):
    - Master Pi
    - Bench 1 (Pi + usbs) 
    - Bench 2 (Pi + usbs) 
    - Bench 3 (Pi + usbs) 

    We would therefore hope that a 6V power supply could be used to support: 
    - Bench 4 (Pi + usbs)
    - Bench 5 (Pi + usbs)
    - Bench 6 (Pi + usbs)
    - Bench 7 (Pi + usbs)
      
    This does seem to leave out the Pi for the testing bench but it *should* work fine from the 6V new supply
    and as we plan on further reducing each Pi's power consumption this is more likely to be possible. 

** Benches need finished! 
*** Bench 1 (1-16)
**** DONE Wiring
**** DONE Connecting cables
**** DONE Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 2 (16-32)
**** DONE Wiring
**** DONE Connecting cables
**** DONE Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 3 (32-48) 
**** DONE Wiring
**** DONE Connecting cables
**** TODO Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 4 (48-64)
**** DONE Wiring
**** DONE Connecting cables
**** TODO Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 5 (64-80)
**** DONE Wiring
**** DONE Connecting cables
**** TODO Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 6 (80-96)
**** DONE Wiring
**** TODO Connecting cables
     Some of the cables just need matched to their numbers and plugged in! (2 minutes max to do)
**** TODO Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 7 (96-112)
**** TODO Wiring
**** TODO Connecting cables
**** TODO Hosepipes
**** TODO Leak patrol
**** TODO Testing
*** Bench 8 (112-120)
**** TODO Testing stuff here
*** TODO Check for exposed cabling
** Testing:
*** General Testing:
**** Solenoids (watering taps)
     To do this on a single basis ssh into each pi and 
     #+NAME: Check if the solenoid is working
     #+BEGIN_SRC bash
pins=(26 19 13 6 21 20 16 12 14 15 18 23 4 2 3 17)

for p in $pins ; do

   echo 1 > /sys/class/gpio/gpio$p/value
   sleep 3
   echo 0 > /sys/class/gpio/gpio$p/value

done
     #+END_SRC
**** Balance readings
     #+NAME: Check reading using Gravi_Utils (run on gravi0*)
     #+BEGIN_SRC bash
for balance in /dev/serial/by-id/*; do 
    gravi_utils balance $f
done
     #+END_SRC
**** Pi's are reading all USB addresses
     #+NAME: Check Pi's USB addresses reporting in
     #+BEGIN_SRC bash
for pi in {1..6}; do
     echo "Checking Gravi0$pi"
     ssh pi@gravi0$pi ls /dev/serial/by-id/ | wc -l;
done
     #+END_SRC
*** Test experiment
**** TODO Experiment needs written to be tested and added to DB
**** TODO Test plants/containers need sourced
** DONE Init scripts need sorted for the pi's [[file:~/Git/Gravimetrics_2016/Setup_Scripts][systemd-init]]
*** [[file:~/Git/Gravimetrics_2016/Setup_Scripts][Setup Scripts for Gravi]]
* Learn: 
** [[https://www.futurelearn.com/courses/learn-to-code/3/todo/7859][Learn to code for data analysis]]  
* Lectures: 
** [[https://blackboard.aber.ac.uk/webapps/blackboard/content/listContent.jsp?course_id%3D_16110_1&content_id%3D_875874_1][Scientific Python]]
* Camera setups
** TODO Configure Gphoto2
** TODO Design interface to allow for naming of images
** TODO Source a device for this to execute / run on
** DONE Find alternate auto-white balance algorithm that isn't gimp
  #+NAME: autowhite balance 
  #+BEGIN_SRC python3 
"""
Credit to: shunsukeaihara@github.com for the algorithms used here

Minor tweaking done by: nah31@aber.ac.uk

Major changes: Stream-lining

"""


import numpy as np
from PIL import Image


def from_pil(pimg):
    pimg = pimg.convert(mode='RGB')
    nimg = np.asarray(pimg)
    nimg.flags.writeable = True
    return nimg


def to_pil(nimg):
    return Image.fromarray(np.uint8(nimg))


def grey_world(nimg):
    nimg = nimg.transpose(2, 0, 1).astype(np.uint32)
    mu_g = np.average(nimg[1])
    nimg[0] = np.minimum(nimg[0] * (mu_g / np.average(nimg[0])), 255)
    nimg[2] = np.minimum(nimg[2] * (mu_g / np.average(nimg[2])), 255)
    return nimg.transpose(1, 2, 0).astype(np.uint8)


def fix_image(image_location):
    img = Image.open(image_location)
    to_pil(grey_world(from_pil(img))).save("test.png")

  #+END_SRC
   
   
